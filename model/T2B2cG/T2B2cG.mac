title: "Simulation of a simplified horizontal axis wind turbine";

SIMPLIFY: 1;
SMALL_ELAST: 1;
WITH_LINEAR: 1;
WITH_ACCELERATIONS: 0;
STATES: [tow_fa, tow_ss, bld_flp, bld_edg, phi_rot, phi_gen];
INPUTS: [vwind, Tgen, theta];
OUTPUTS: [tow_fa_acc, tow_ss_acc, gen_speed, bld_flp_acc, bld_edg_acc, bld_edg_mom, bld_flp_mom];

EXTERNAL: [cm(), ct(), cflp(), cedg(), cmy_D23(), theta_deg(), lam(), Trot(tow_fa_d, phi_rot_d, bld_flp_d, bld_edg_d, vwind, theta), MyD23(phi_rot_d, vwind, theta), Fthrust(tow_fa_d, phi_rot_d, bld_flp_d, bld_edg_d, vwind, theta), Ftow_y(tow_ss_d), modalFlapForce(tow_fa_d, phi_rot_d, bld_flp_d, bld_edg_d, vwind, theta), modalEdgeForce(tow_fa_d, phi_rot_d, bld_flp_d, bld_edg_d, vwind, theta)];
EXT_PARAM: [rho, lambdaMin, lambdaMax, lambdaStep, thetaMin, thetaMax, thetaStep, Arot, cm_lut[25, 91], ct_lut[25, 91], cmy_D23_lut[25, 91], cf_lut[25, 91], ce_lut[25, 91], dcm_dvf_v_lut[25, 91], dcm_dve_v_lut[25, 91], dct_dvf_v_lut[25, 91], dct_dve_v_lut[25, 91], dcs_dvy_v_lut[25, 91], dcf_dvf_v_lut[25, 91], dcf_dve_v_lut[25, 91], dce_dvf_v_lut[25, 91], dce_dve_v_lut[25, 91]];

/* Gravity vector */
gravity: [0, 0, -g];

/* 1 Tower */
load(filename_merge(load_pathname, "tw_sid.mac"));
elastic_dof[1]: [tow_fa, tow_ss];
ebody[1]: tower;
T0G[1]: Tdisp(0, 0, 0);

/* 2 Nacelle */
mass[2]: NacMass;
Ixx[2]: NacXIner;
Iyy[2]: NacYIner;
Izz[2]: NacZIner;
BodyRef[2]: 1;
/* TrefG[2]: Tdisp(tow_fa, tow_ss, 0).Tdisp(NacCMxn, NacCMyn, NacCMzn); */
TrefG[2]: Telast(1, 1).Tdisp(NacCMxn, NacCMyn, NacCMzn);
/* TrefG[2]: Tdisp(tow_fa, tow_ss, 0).Tdisp(NacCMxn, NacCMyn, NacCMzn).Troty_lin(tow_fa*TwTrans2Roll).Trotx_lin(-tow_ss*TwTrans2Roll); */

/* 3 Hub */
mass[3]: HubMass;
Ixx[3]: HubIner;
Iyy[3]: HubIner;
Izz[3]: HubIner;
BodyRef[3]: 2;
TrefG[3]:  Tdisp(HubCM+OverHang-NacCMxn, -NacCMyn, Twr2Shft-NacCMzn).Trotx(phi_rot);

/* 4,5,6 Blades */
load(filename_merge(load_pathname, "bd_sid.mac"));

/* Blade 1 */
elastic_dof[4]: [bld_flp, bld_edg];
ebody[4]: blade;
BodyRef[4]: 3;
TrefG[4]:  Tdisp(-HubCM, 0, 0).Trotz(theta).Trotx(z[1]).Troty(z[2]);

/* Blade 2 */
elastic_dof[5]: [bld_flp, bld_edg];
ebody[5]: blade;
BodyRef[5]: 3;
TrefG[5]:  Tdisp(-HubCM, 0, 0).Trotx(%pi/3*2).Trotz(theta).Trotx(z[1]).Troty(z[2]);

/* Blade 3 */
elastic_dof[6]: [bld_flp, bld_edg];
ebody[6]: blade;
BodyRef[6]: 3;
TrefG[6]:  Tdisp(-HubCM, 0, 0).Trotx(%pi/3*4).Trotz(theta).Trotx(z[1]).Troty(z[2]);

/* 7 Geno */
BodyRef[7]: 2;
mass[7]: 0;
Ixx[7]: GenIner;
Iyy[7]: 0;
Izz[7]: 0;
TrefG[7]:  Trotx(phi_gen);


appliedForces():= (
    for i: 4 thru 6 do (
    /* Thrust */
        OoPforce: Fthrust/3,
        thrustForceRadius: 2/3*Rrot,
    /* flapwise */
        RMG: applyForceInLocal(unitZ*thrustForceRadius, cos(theta)*unitX*OoPforce, T0G[i]),
        appliedF[i]: RMG[1],
        appliedM[i]: RMG[2],

    /* edgewise */
        RMG: applyForceInLocal(unitZ*thrustForceRadius, -sin(theta)*unitY*OoPforce, T0G[i]),
        appliedF[i]: appliedF[i] + RMG[1],
        appliedM[i]: appliedM[i] + RMG[2] ,
        appliedM[i]: appliedM[i] + submatrix(4, T0G[i].Trotz(-theta), 4) . matrix([0], [MyD23], [0]),

    /* Torque */
        IPforce: Trot/3/torqueForceRadius,
    /* flapwise */
        RMG: applyForceInLocal(unitZ*torqueForceRadius, -sin(theta)*unitX*IPforce, T0G[i]),
        appliedF[i]: appliedF[i] + RMG[1],
        appliedM[i]: appliedM[i] + RMG[2],

    /* edgewise */
        RMG: applyForceInLocal(unitZ*torqueForceRadius, -cos(theta)*unitY*IPforce, T0G[i]),
        appliedF[i]: appliedF[i] + RMG[1],
        appliedM[i]: appliedM[i] + RMG[2],

    /* modal forces */
        appliedFe[i]: matrix([modalFlapForce], [modalEdgeForce])
    ),

    /* M_DT: DTTorSpr*(q[6]/GBRatio-q[3]) + DTTorDmp*(qd[6]/GBRatio-phi_rot_d), */
    /* M_DT: DTTorSpr*(q[6]-q[3]) + DTTorDmp*(qd[6]-phi_rot_d), */
    M_DT: -DTTorSpr*(phi_gen/GBRatio-phi_rot) - DTTorDmp*(phi_gen_d/GBRatio-phi_rot_d),

    appliedM[7]: matrix([M_DT/GBRatio - Tgen], [0], [0]),
    appliedM[3]: matrix([-M_DT], [0], [0]),
    appliedM[2]: matrix([M_DT], [0], [0]),
    
    appliedF[2]: matrix([0], [Ftow_y], [0]),
    
    done
);

modelOutputs(sys):= block([bld_accel],
    bld_accel: transpose(submatrix(4, sys@sys_abs@T0G[3] . Troty(cone) . Trotz(theta), 4) . Trot_elast(sys@sys_abs, 4, 30)) . abs_accel_elast(sys@sys_abs, 4, 30),

    [tow_fa_dd, tow_ss_dd, phi_gen_d, bld_accel[1,1], bld_accel[2,1], sys@constraints[1]/3, sys@constraints[2]/3]
);
